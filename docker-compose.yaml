version: '3.8'
services:


  rabbitMQ:
    image: rabbitmq:3-management-alpine
    container_name: "rabbitMQ"
    restart: unless-stopped
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./volRabbit/data/:/var/lib/rabbitmq/
      - ./volRabbit/log/:/var/log/rabbitmq
    networks:
      - skynet
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 30s
      timeout: 10s
      retries: 5

  mongoDB:
    image: mongo:6-jammy
    container_name: "mongoDB"
    env_file:
      - ./.env
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - ./volMongo:/data/db
    networks:
      - skynet
    healthcheck:
      test: [ "CMD","mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongoDB:27017/
      ME_CONFIG_BASICAUTH: false
    networks:
      - skynet
  
  pgDB:
    image: postgres:15
    shm_size: 128mb
    ports:
      - "5432:5432"
    env_file:
      - .env
    volumes:
      - volPostgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"] # Check specific database
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    networks:
      - skynet

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    environment:
      ADMINER_DEFAULT_SERVER: pgDB
    networks:
      - skynet

  users-service:
    build:
      context: ./users-service
      dockerfile: Dockerfile
    container_name: "users-service"
    command:
      - /bin/bash
      - -c
      - |
        alembic upgrade head
        gunicorn app.main:app --bind 0.0.0.0:8000 --worker-class uvicorn.workers.UvicornWorker --capture-output --log-level debug
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    environment:
      - POSTGRES_HOST=pgDB
    depends_on:
      pgDB:
        condition: service_healthy
    networks:
      - skynet
    volumes:
      - './users-service/:/users_svc_app'

  gateway-service:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: "gateway-service"
    command: [ "python", "run.py" ]
    ports:
      - "5000:5000"
    env_file:
      - ./.env
    depends_on:
      mongoDB:
        condition: service_healthy
      rabbitMQ:
        condition: service_healthy
    networks:
      - skynet
    volumes:
      - './gateway/:/gateway_svc_app'

  converter-service:
    build:
      context: ./converter-service
      dockerfile: Dockerfile
    container_name: "converter-service"
    command: [ "python", "run.py" ]
    env_file:
      - ./.env
    depends_on:
      mongoDB:
        condition: service_healthy
      rabbitMQ:
        condition: service_healthy
    networks:
      - skynet
    volumes:
      - './converter-service/:/converter_svc_app'

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: "notification-service"
    command: [ "python", "run.py" ]
    env_file:
      - ./.env
    depends_on:
      mongoDB:
        condition: service_healthy
      rabbitMQ:
        condition: service_healthy
    networks:
      - skynet
    volumes:
      - './notification-service/:/notification_svc_app'

networks:
  skynet:
    driver: bridge

volumes:
  volRabbit:
  volMongo:
  volPostgres:

